// Generated by CoffeeScript 1.4.0
(function() {

  window.russel_module = angular.module('russel', []);

  $(window).resize(function(e) {
    var BORDER, BOTTOM_PANE, INNER, MARGIN, PANES, TOP_PANE, border, border_r, bottom, center, char_size, h, inner, inner_r, margin, margin_r, score_size, side, space, tiles, top, w;
    h = $(window).height();
    w = $(window).width();
    console.log(h, w);
    TOP_PANE = 0.1;
    BOTTOM_PANE = 0.1;
    INNER = 0.75;
    MARGIN = 1 - INNER;
    BORDER = 0.015;
    PANES = 1 + TOP_PANE + BOTTOM_PANE;
    if (h < w * PANES) {
      w = h / PANES;
    }
    top = Math.floor(w * TOP_PANE);
    center = w;
    bottom = Math.floor(w * BOTTOM_PANE);
    space = Math.floor((h - top - center - bottom) / 2);
    $('#top-space,#bottom-space').css('height', space);
    $('div.container').css('width', Math.floor(center));
    side = center / 4;
    inner = side * INNER;
    margin = side * (MARGIN / 2);
    border = side * BORDER;
    inner_r = Math.floor(inner);
    border_r = Math.max(1, Math.floor(border));
    margin_r = (Math.floor(margin)) - border_r;
    char_size = Math.floor(inner * 0.84);
    score_size = Math.floor(inner * 0.2);
    tiles = $('.tile').css('width', inner_r).css('height', inner_r).css('margin', margin_r).css('border-width', border_r);
    tiles.find('.char').css('font-size', char_size);
    tiles.find('.score').css('font-size', score_size);
    tiles.find('.shadow-score').css('font-size', score_size);
    $('#top').css('height', top).css('font-size', top);
    return $('#bottom').css('height', bottom).css('font-size', bottom);
  });

  russel_module.controller('TileCtrl', function() {
    return $(window).trigger('resize');
  });

  russel_module.controller('GridCtrl', function($scope, $timeout) {
    var debug, i, in_snake, j, neighbour;
    $scope.coord = [void 0, void 0];
    $scope.drawing = false;
    $scope.info = "";
    $scope.snake = [];
    $scope.grid = ["ACKS", "RLIA", "ÄOTR", "NHIE"];
    $scope.score = function(char) {
      return $scope.scores[char];
    };
    $scope.scores = {
      'A': 1,
      'B': 4,
      'C': 8,
      'D': 1,
      'E': 1,
      'F': 4,
      'G': 2,
      'H': 3,
      'I': 1,
      'J': 8,
      'K': 3,
      'L': 1,
      'M': 3,
      'N': 1,
      'O': 2,
      'P': 3,
      'Q': 10,
      'R': 1,
      'S': 1,
      'T': 1,
      'U': 3,
      'V': 4,
      'X': 10,
      'Y': 8,
      'Z': 10,
      'Å': 4,
      'Ä': 4,
      'Ö': 4
    };
    debug = function() {};
    $scope.down = function() {
      $scope.drawing = true;
      return $scope.push();
    };
    $scope.up = function() {
      $scope.drawing = false;
      return $scope.erase();
    };
    $scope.enter = function($event) {
      var char, elem, tile, x, x_str, y, y_str;
      if ($event.originalEvent.type === "touchmove") {
        $scope.drawing = true;
      }
      elem = $(document.elementFromPoint($event.pageX, $event.pageY));
      tile = elem.closest('.tile');
      char = tile.find('.char');
      x_str = tile.find('#x').text();
      y_str = tile.find('#y').text();
      if (x_str && y_str) {
        x = Number(x_str);
        y = Number(y_str);
        $scope.coord = [x, y];
        if ($scope.drawing) {
          return $scope.push();
        }
      }
    };
    in_snake = function(x, y) {
      return $scope.status(x, y) === "selected";
    };
    neighbour = function(_arg, _arg1) {
      var x0, x1, y0, y1;
      x0 = _arg[0], y0 = _arg[1];
      x1 = _arg1[0], y1 = _arg1[1];
      return Math.max(Math.abs(x0 - x1), Math.abs(y0 - y1)) <= 1;
    };
    $scope.push = function() {
      var adjacent, empty, is_new, x, y, _ref;
      empty = _.isEmpty($scope.snake);
      is_new = !(in_snake.apply(null, $scope.coord));
      adjacent = empty || neighbour($scope.coord, _.last($scope.snake));
      if (empty || (is_new && adjacent)) {
        $scope.last_status = "selected";
        _ref = $scope.coord, x = _ref[0], y = _ref[1];
        $scope.statuses[x][y] = "selected";
        return $scope.snake.push($scope.coord);
      }
    };
    $scope.last_word = "";
    $scope.last_status = "";
    $scope.erase = function() {
      var clear_status, x, y, _i, _len, _ref, _ref1;
      $scope.last_status = _.shuffle(["wrong", "correct"])[0];
      $scope.last_word = $scope.word();
      _ref = $scope.snake;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1];
        $scope.statuses[x][y] = $scope.last_status;
      }
      $scope.snake = [];
      clear_status = function() {
        var _j, _results;
        $scope.last_word = "";
        $scope.last_status = "";
        _results = [];
        for (x = _j = 0; _j <= 3; x = ++_j) {
          _results.push((function() {
            var _k, _results1;
            _results1 = [];
            for (y = _k = 0; _k <= 3; y = ++_k) {
              if ($scope.statuses[x][y] !== "selected") {
                _results1.push($scope.statuses[x][y] = "");
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        }
        return _results;
      };
      return $timeout(clear_status, 300);
    };
    $scope.statuses = (function() {
      var _i, _results;
      _results = [];
      for (j = _i = 0; _i <= 3; j = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 0; _j <= 3; i = ++_j) {
            _results1.push("");
          }
          return _results1;
        })());
      }
      return _results;
    })();
    $scope.status = function(x, y) {
      return $scope.statuses[x][y];
    };
    $scope.lookup = function(x, y) {
      return $scope.grid[y][x];
    };
    return $scope.word = function() {
      var snake_word;
      snake_word = (_.map($scope.snake, function(w) {
        return $scope.lookup.apply($scope, w);
      })).join('');
      return snake_word || $scope.last_word;
    };
  });

}).call(this);
